{
  "Introduction to DSA ": {
    "What is DSA": {
      "description": "Data Structures and Algorithms (DSA) are the building blocks for solving problems in programming efficiently. Data structures are ways of organizing and storing data, while algorithms are step-by-step procedures for solving a problem. Understanding DSA helps improve the efficiency and performance of programs."
    },
    "Types_of_Data_Structures": {
      "Primitive_Data_Structures": {
        "description": "These are the basic types provided by programming languages.",
        "examples": [
          "Integer: Whole numbers (e.g., int in Java, C, C++)",
          "Float: Decimal numbers (e.g., float in C, C++, Java)",
          "Character: Single characters (e.g., char in C, C++, Java)",
          "Boolean: True or false values"
        ]
      },
      "Non_Primitive_Data_Structures": {
        "description": "These are built from primitive data types and are more complex.",
        "examples": [
          "Arrays: Collection of elements of the same data type stored in contiguous memory.",
          "Linked Lists: Collection of nodes, where each node contains data and a reference to the next node."
        ]
      }
    },
    "Arrays": {
      "description": "An array is a collection of items stored at contiguous memory locations. All elements of an array are of the same type.",
      "basic_operations": {
        "access": "Accessing an element using an index (constant time O(1)).",
        "insert": "Inserting an element at a given position.",
        "delete": "Removing an element from the array.",
        "search": "Finding an element by iterating through the array."
      },
      "drawbacks": [
        "Fixed size: Once declared, the size cannot be changed.",
        "Expensive insertion/deletion: These operations require shifting elements."
      ],
      "example": {
        "code": "int[] arr = {1, 2, 3, 4, 5};\nSystem.out.println(arr[2]); // Output: 3"
      }
    },
    "Linked_Lists": {
      "description": "A linked list is a linear data structure where each element is a separate object, each containing data and a reference (link) to the next node.",
      "types": [
        "Singly Linked List: Each node points to the next node, and the last node points to null.",
        "Doubly Linked List: Each node has two references, one to the next node and another to the previous node.",
        "Circular Linked List: The last node points to the first node, making the list circular."
      ],
      "basic_operations": [
        "Insertion: Insert a node at the beginning, end, or at a specific position.",
        "Deletion: Remove a node from the beginning, end, or specific position.",
        "Traversal: Accessing each node in the list."
      ],
      "example": {
        "code": "class Node {\n    int data;\n    Node next;\n    public Node(int data) {\n        this.data = data;\n        this.next = null;\n    }\n}\npublic class LinkedList {\n    Node head;\n    public void insert(int data) {\n        Node newNode = new Node(data);\n        if (head == null) {\n            head = newNode;\n        } else {\n            Node temp = head;\n            while (temp.next != null) {\n                temp = temp.next;\n            }\n            temp.next = newNode;\n        }\n    }\n}"
      },
      "advantages": [
        "Dynamic size: Can grow and shrink in size as needed.",
        "Efficient insertions/deletions: Do not require shifting elements like arrays."
      ],
      "drawbacks": [
        "Random access is not possible (O(n) time complexity for accessing an element).",
        "Extra memory is required for storing references (pointers)."
      ]
    },
    "Stacks_and_Queues": {
      "description": "Stacks and queues are abstract data types used to store elements in specific orders.",
      "stack": {
        "definition": "A stack follows the LIFO (Last In, First Out) principle.",
        "operations": [
          "Push: Add an element to the stack.",
          "Pop: Remove an element from the stack."
        ],
        "example": {
          "code": "class Stack {\n    private LinkedList<Integer> list = new LinkedList<>();\n    public void push(int value) {\n        list.addFirst(value);  // Adds to the front (top of the stack)\n    }\n    public int pop() {\n        if (list.isEmpty()) throw new EmptyStackException();\n        return list.removeFirst();  // Removes from the front\n    }\n}"
        }
      },
      "queue": {
        "definition": "A queue follows the FIFO (First In, First Out) principle.",
        "operations": [
          "Enqueue: Add an element to the queue.",
          "Dequeue: Remove an element from the queue."
        ],
        "example": {
          "code": "class Queue {\n    private LinkedList<Integer> list = new LinkedList<>();\n    public void enqueue(int value) {\n        list.addLast(value);  // Adds to the end\n    }\n    public int dequeue() {\n        if (list.isEmpty()) throw new NoSuchElementException();\n        return list.removeFirst();  // Removes from the front\n    }\n}"
        }
      }
    },
    "Hashing_and_Hash_Tables": {
      "description": "A hash table stores key-value pairs. It uses a hash function to convert the key into an index, where the value is stored.",
      "operations": [
        "Insert: Use a hash function to find the index and insert the value.",
        "Search: Use the key to find the value in constant time (on average O(1)).",
        "Delete: Remove the key-value pair using the hash."
      ],
      "example": {
        "code": "import java.util.HashMap;\npublic class Main {\n    public static void main(String[] args) {\n        HashMap<String, Integer> map = new HashMap<>();\n        map.put(\"Apple\", 3);\n        map.put(\"Banana\", 2);\n        System.out.println(map.get(\"Apple\"));  // Output: 3\n    }\n}"
      },
      "advantages": [
        "Fast access to data (O(1) on average).",
        "Efficient for searching and deleting data."
      ],
      "drawbacks": [
        "Hash collisions may occur, requiring resolution techniques like chaining or open addressing."
      ]
    },
    "Trees_and_Graphs": {
      "binary_trees": {
        "description": "A binary tree is a tree data structure where each node has at most two children, commonly referred to as left and right children."
      },
      "binary_search_tree": {
        "description": "A binary search tree is a binary tree where the left child is smaller than the parent node, and the right child is larger."
      },
      "operations": [
        "Insertion: Insert a new node in the correct position.",
        "Traversal: Visiting all nodes in the tree (Inorder, Preorder, Postorder)."
      ],
      "graph": {
        "description": "A graph consists of nodes (vertices) and edges (connections between nodes). Graphs can be directed or undirected and weighted or unweighted.",
        "traversal": [
          "BFS (Breadth-First Search): Explore all neighbors of a node before moving to the next level.",
          "DFS (Depth-First Search): Explore as far as possible along a branch before backtracking."
        ]
      }
    },
    "Algorithms": {
      "sorting_algorithms": [
        "Bubble Sort: Repeatedly compare and swap adjacent elements (O(n^2) time complexity).",
        "Merge Sort: Divide the array into halves, sort each half, and merge them (O(n log n)).",
        "Quick Sort: Select a pivot element and partition the array around it (O(n log n) on average)."
      ],
      "searching_algorithms": [
        "Linear Search: Iterate through each element to find a match (O(n) time complexity).",
        "Binary Search: Efficiently search a sorted array by dividing the search interval in half (O(log n))."
      ]
    },
    "Time_Complexity": {
      "O(1)": "Constant time.",
      "O(n)": "Linear time.",
      "O(log n)": "Logarithmic time.",
      "O(n^2)": "Quadratic time."
    },
    "Intermediate_DSA_Topics": [
      "Heap: A special tree-based data structure used for implementing priority queues.",
      "Trie: A tree-like data structure used for storing strings.",
      "Dynamic Programming: Solve problems by breaking them into subproblems and storing their solutions."
    ]
  }
}
