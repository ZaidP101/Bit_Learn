{
    "1_Introduction_to_C++": {
        "description": "C++ is a high-level, general-purpose programming language widely used for system/software development and game programming. It is known for its performance, efficiency, and flexibility, making it ideal for applications that require direct hardware access or need to operate in real-time environments.",
        "history": "C++ was developed by Bjarne Stroustrup in 1979 at Bell Labs as an extension of the C programming language. C++ introduced object-oriented features while retaining the procedural programming characteristics of C.",
        "features": [
            "Object-oriented programming features like classes, objects, and inheritance.",
            "Low-level memory manipulation, giving developers control over system resources.",
            "Powerful for both system-level and application-level programming, with extensive use in operating systems, embedded systems, and high-performance software.",
            "Supports both procedural and object-oriented programming paradigms.",
            "Rich standard library with data structures, algorithms, input/output operations, and more."
        ],
        "resources": {
            "learning_resources": [
                {
                    "title": "Official C++ Documentation",
                    "url": "https://isocpp.org/"
                },
                {
                    "title": "C++ Tutorials on w3schools",
                    "url": "https://www.w3schools.com/cpp/"
                },
                {
                    "title": "LearnCpp.com",
                    "url": "https://www.learncpp.com/"
                }
            ]
        }
    },
    "2_Basic_Syntax": {
        "description": "The basic structure of a C++ program follows certain syntax rules. A C++ program typically includes header files, namespaces, and a `main()` function, which is the entry point of execution.",
        "structure": {
            "include": "#include <iostream>",
            "namespace": "using namespace std;",
            "main_function": "int main() { /* Program code */ return 0; }"
        },
        "comments": {
            "single_line": "// This is a single-line comment",
            "multi_line": "/* This is a multi-line comment */"
        },
        "code": {
            "full_program": "#include <iostream>\nusing namespace std;\nint main() {\n    cout << 'Hello, World!';\n    return 0;\n}"
        }
    },
    "3_Variables_and_Data_Types": {
        "description": "In C++, variables must be declared with a specific data type before use. The data type determines the size and type of data the variable can store.",
        "data_types": {
            "int": "Integer type, used to store whole numbers (positive, negative, or zero).",
            "float": "Floating-point type, used for numbers with decimals (e.g., 3.14, -0.001).",
            "double": "More precise floating-point type, used for numbers requiring higher precision.",
            "char": "Character type, used to store a single character (e.g., 'A', 'z').",
            "bool": "Boolean type, stores true or false values.",
            "void": "Represents no type, commonly used for functions that do not return a value."
        },
        "code": {
            "variable_declaration": "int age = 30;\nfloat weight = 65.5;\nchar grade = 'A';\nbool isAdult = true;",
            "printing_variables": "cout << 'Age: ' << age << '\\n';\ncout << 'Weight: ' << weight << '\\n';"
        }
    },
    "4_Input_and_Output": {
        "description": "C++ provides standard input/output streams to allow interaction with the user. `cin` is used to receive input, while `cout` is used to display output.",
        "code": {
            "input": "int age;\ncin >> age;",
            "output": "cout << 'Your age is: ' << age;",
            "endl": "cout << 'This will print a new line' << endl;"
        },
        "details": {
            "cin": "Used for taking input from the user, typically through the keyboard.",
            "cout": "Used to print output to the console, allowing feedback to the user.",
            "endl": "Inserts a newline character and flushes the output buffer to ensure immediate output."
        }
    },
    "5_Control_Structures": {
        "description": "Control structures in C++ are used to determine the flow of execution of a program based on conditions or loops.",
        "if_else": {
            "syntax": "if (condition) { /* code */ } else { /* code */ }",
            "code": "if (number > 5) {\n    cout << 'Greater';\n} else {\n    cout << 'Not greater';\n}"
        },
        "switch_case": {
            "syntax": "switch (expression) { case value: /* code */ break; default: /* code */ }",
            "code": "switch (day) {\n    case 1: cout << 'Monday'; break;\n    default: cout << 'Invalid day'; break;\n}"
        },
        "loops": {
            "for": {
                "syntax": "for (int i = 0; i < 5; i++) { /* code */ }",
                "code": "for (int i = 0; i < 5; i++) {\n    cout << i;\n}"
            },
            "while": {
                "syntax": "while (condition) { /* code */ }",
                "code": "int count = 0;\nwhile (count < 5) {\n    cout << count;\n    count++;\n}"
            },
            "do_while": {
                "syntax": "do { /* code */ } while (condition);",
                "code": "int count = 0;\ndo {\n    cout << count;\n    count++;\n} while (count < 5);"
            }
        }
    },
    "6_Functions": {
        "description": "Functions in C++ allow code to be reused multiple times. They are blocks of code that perform a specific task when called.",
        "defining_functions": {
            "syntax": "return_type function_name(parameter_list) { /* code */ }",
            "code": "int add(int a, int b) {\n    return a + b;\n}\nint result = add(5, 3);\ncout << 'Result: ' << result;"
        },
        "overloading": {
            "syntax": "return_type function_name(data_type, data_type) { /* code */ }",
            "code": "int multiply(int a, int b) {\n    return a * b;\n}\ncout << 'Multiplication: ' << multiply(5, 4);"
        }
    },
    "7_Object_Oriented_Programming": {
        "description": "Object-Oriented Programming (OOP) is a paradigm based on objects rather than actions. In C++, classes and objects are used to represent real-world entities or concepts.",
        "classes_and_objects": {
            "syntax": "class ClassName { /* data members and methods */ }",
            "code": "class Person {\npublic:\n    string name;\n    int age;\n    void display() {\n        cout << 'Name: ' << name << ', Age: ' << age;\n    }\n};\nint main() {\n    Person p;\n    p.name = 'Alice';\n    p.age = 25;\n    p.display();\n    return 0;\n}"
        },
        "inheritance": {
            "syntax": "class DerivedClass : access_modifier BaseClass { /* derived class members */ }",
            "code": "class Animal {\npublic:\n    void speak() {\n        cout << 'Animal sound';\n    }\n};\nclass Dog : public Animal {\npublic:\n    void speak() {\n        cout << 'Woof!';\n    }\n};\nint main() {\n    Dog d;\n    d.speak();\n    return 0;\n}"
        },
        "polymorphism": {
            "syntax": "Function overloading or overriding used in class definitions",
            "code": "class Shape {\npublic:\n    virtual void draw() {\n        cout << 'Drawing a shape';\n    }\n};\nclass Circle : public Shape {\npublic:\n    void draw() {\n        cout << 'Drawing a circle';\n    }\n};\nint main() {\n    Shape* s = new Circle();\n    s->draw();\n    delete s;\n    return 0;\n}"
        }
    },
    "8_Advanced_Topics": {
        "templates": {
            "syntax": "template <typename T> return_type function_name(T param) { /* code */ }",
            "code": "template <typename T>\nT maximum(T a, T b) {\n    return (a > b) ? a : b;\n}\nint main() {\n    cout << 'Max: ' << maximum(5, 3);\n    return 0;\n}"
        },
        "exception_handling": {
            "syntax": "try { /* code */ } catch (ExceptionType) { /* code */ }",
            "code": "try {\n    int result = 10 / 0;\n} catch (const std::exception& e) {\n    cout << 'Exception: ' << e"
        }
    },
    "9_Object_Oriented_Programming": {
        "description": "C++ supports object-oriented programming (OOP), which involves organizing code into classes and objects. Key OOP concepts in C++ include classes, inheritance, polymorphism, and encapsulation.",
        "concepts": {
            "classes_and_objects": {
                "description": "A class is a blueprint for creating objects, which are instances of a class. An object has properties (attributes) and methods (functions).",
                "Code": {
                    "code" : "class_declaration class Person {\npublic:\n    string name;\n    void introduce() {\n        cout << 'My name is ' << name;\n    }\n} object_creation Person p;\np.name = 'John';\np.introduce();"
                }
            },
            "inheritance": {
                "description": "Inheritance allows one class (the derived class) to inherit properties and methods from another class (the base class).",
                "Code": {
                    "code" : "base_class = class Animal {\npublic:\n    void eat() {\n        cout << 'Eating';\n    }\n} derived_class =  class Dog = public Animal {\npublic:\n    void bark() {\n        cout << 'Barking';\n    }\n};"
                }
            },
            "polymorphism": {
                "description": "Polymorphism allows methods to behave differently depending on the object that calls them. It can be achieved using virtual functions and method overriding.",
                "Example": {
                    "code": "virtual_function = class Animal {\npublic:\n    virtual void sound() {\n        cout << 'Animal sound';\n    }\n}; overridden_function = class Dog : public Animal {\npublic:\n    void sound() {\n        cout << 'Bark';\n    }\n};"
                
                }
            }
        }
    },
    "10_Memory_Management": {
        "description": "C++ provides features for dynamic memory management, enabling you to allocate and deallocate memory manually. This allows better control over memory usage.",
        "Example": {
            "code":"new: int* ptr = new int(10); // Allocates memory for an integer and initializes it to 10. delete delete ptr; // Deallocates memory previously allocated using 'new'."
        }
    }
}
