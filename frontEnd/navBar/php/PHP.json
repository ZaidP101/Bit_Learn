{
  "Introduction to PHP": {
    "What is PHP": "PHP (Hypertext Preprocessor) is a widely-used, open-source server-side scripting language designed for web development. It can also be embedded into HTML and used for building dynamic web pages and applications. PHP is designed to work seamlessly with databases and has a huge community, making it an ideal choice for backend web development."
  },
  "installation": {
    "steps": [
      "Download XAMPP, WAMP, or MAMP based on your OS.",
      "Install the chosen package.",
      "Access your server through 'localhost' or a similar local server URL.",
      "Verify installation by creating a simple PHP file with '<?php echo \"Hello, World!\"; ?>' and access it via your browser."
    ]
  },
  "syntax_basics": {
    "code": "<?php\n  echo 'Hello, World!';\n?>",
    "file_extension": "Save the file with a .php extension (e.g., index.php) and access it through your web server (e.g., http://localhost/index.php).",
    "additional_example": {
      "code": "<?php\n  echo 'Learning PHP is fun!';\n?>",
      "explanation": "The 'echo' statement is used to output data to the browser. It can output text, variables, and HTML code."
    }
  },
  "php_fundamentals": {
    "variables": {
      "description": "Variables in PHP are declared using a $ symbol. PHP variables are loosely typed, meaning you don't need to declare their type explicitly.",
      "code": "<?php\n  $name = 'Alice';\n  $age = 25;\n  echo 'Name: ' . $name . ', Age: ' . $age;\n?>",
      "additional_code": "<?php\n  $price = 19.99;\n  echo 'Price: $' . $price;\n?>",
      "explanation": "Here, we declare two variables: one holding a string ('Alice') and another holding an integer (25). PHP concatenates these using the '.' operator."
    },
    "data_types": {
      "types": [
        "Strings: 'Hello'",
        "Integers: 42",
        "Floats: 3.14",
        "Booleans: true, false",
        "Arrays: ['apple', 'banana']",
        "Objects: class-based structures",
        "NULL: Represents no value or an uninitialized variable"
      ]
    },
    "constants": {
      "definition": "Constants are defined using define() and cannot be changed after they are set. Unlike variables, constants do not need the '$' symbol.",
      "code": "<?php\n  define('SITE_NAME', 'MyWebsite');\n  echo SITE_NAME;\n?>",
      "example_usage": "<?php\n  define('MAX_LIMIT', 100);\n  echo MAX_LIMIT;\n?>"
    },
    "strings": {
      "concatenation_code": "<?php\n  $greet = 'Hello';\n  $name = 'Bob';\n  echo $greet . ', ' . $name;\n?>",
      "interpolation_code": "<?php\n  $name = 'Alice';\n  echo \"Hello, $name\";\n?>",
      "multiline_string": "<?php\n  $message = <<<EOT\nThis is a\nmultiline string.\nEOT;\n  echo $message;\n?>"
    },
    "operators": {
      "arithmetic": ["+", "-", "*", "/", "%", "** (exponentiation)"],
      "comparison": ["==", "!=", "<", ">", "<=", ">="],
      "logical": ["&&", "||", "!"],
      "increment_decrement": ["++", "--"],
      "concatenation": ["."]
    },
    "conditionals": {
      "if_code": "<?php\n  $age = 20;\n  if ($age > 18) {\n    echo 'You are an adult.';\n  } else {\n    echo 'You are a minor.';\n  }\n?>",
      "elseif_code": "<?php\n  $score = 85;\n  if ($score >= 90) {\n    echo 'A+';\n  } elseif ($score >= 75) {\n    echo 'A';\n  } else {\n    echo 'B';\n  }\n?>"
    }
  },
  "arrays": {
    "indexed_arrays": {
      "code": "<?php\n  $colors = ['Red', 'Green', 'Blue'];\n  echo $colors[0]; // Output: Red\n?>",
      "multidimensional_array": "<?php\n  $matrix = [[1, 2], [3, 4]];\n  echo $matrix[1][0]; // Output: 3\n?>",
      "array_functions": {
        "sort_example": "<?php\n  $numbers = [5, 3, 8, 1];\n  sort($numbers);\n  print_r($numbers); // Output: [1, 3, 5, 8]\n?>",
        "array_merge_example": "<?php\n  $arr1 = [1, 2];\n  $arr2 = [3, 4];\n  $result = array_merge($arr1, $arr2);\n  print_r($result); // Output: [1, 2, 3, 4]\n?>"
      }
    },
    "associative_arrays": {
      "code": "<?php\n  $person = ['name' => 'Alice', 'age' => 25];\n  echo $person['name']; // Output: Alice\n?>",
      "example_usage": "<?php\n  $user = ['username' => 'john', 'email' => 'john@example.com'];\n  echo $user['email']; // Output: john@example.com\n?>"
    },
    "loops_with_arrays": {
      "code": "<?php\n  $numbers = [1, 2, 3];\n  foreach ($numbers as $num) {\n    echo $num;\n  }\n?>",
      "array_walk_example": "<?php\n  $fruits = ['apple', 'banana', 'cherry'];\n  array_walk($fruits, function($item) {\n    echo strtoupper($item) . ' ';\n  });\n?>"
    }
  },
  "functions": {
    "declaration_and_calling": {
      "code": "<?php\n  function greet($name) {\n    return \"Hello, $name!\";\n  }\n  echo greet('Alice');\n?>"
    },
    "default_arguments": {
      "code": "<?php\n  function greet($name = 'Guest') {\n    return \"Hello, $name!\";\n  }\n  echo greet(); // Output: Hello, Guest!\n?>"
    },
    "returning_multiple_values": {
      "code": "<?php\n  function get_values() {\n    return [1, 2, 3];\n  }\n  list($a, $b, $c) = get_values();\n  echo $a, $b, $c; // Output: 123\n?>"
    }
  },
  "form_handling": {
    "description": "PHP can handle form data sent using GET or POST methods.",
    "get_vs_post": {
      "get": "GET appends data to the URL and is visible to the user in the browser's address bar. It's typically used for non-sensitive data.",
      "post": "POST sends data in the request body, making it more secure for transmitting sensitive information."
    },
    "example_form": "<form method='POST' action='process.php'>\n  <input type='text' name='username'>\n  <button type='submit'>Submit</button>\n</form>",
    "process_php_code": "<?php\n  $username = $_POST['username'];\n  echo 'Hello, ' . $username . '!';\n?>"
  },
  "superglobals": {
    "examples": [
      "$_GET: Used to collect form data after submitting a form using the GET method.",
      "$_POST: Used to collect form data after submitting a form using the POST method.",
      "$_SESSION: Stores session variables that can be used across pages.",
      "$_COOKIE: Stores small pieces of data that can persist across sessions.",
      "$_SERVER: Contains information about headers, paths, and script locations.",
      "$_FILES: Handles file uploads from forms."
    ]
  },
  "file_handling": {
    "read_file": {
      "code": "<?php\n  $file = fopen('example.txt', 'r');\n  echo fread($file, filesize('example.txt'));\n  fclose($file);\n?>"
    },
    "write_file": {
      "code": "<?php\n  $file = fopen('example.txt', 'w');\n  fwrite($file, 'Hello, File!');\n  fclose($file);\n?>"
    },
    "file_exists_check": "<?php\n  if (file_exists('example.txt')) {\n    echo 'File exists.';\n  } else {\n    echo 'File does not exist.';\n  }\n?>"
  },
  "sessions": {
    "code": "<?php\n  session_start();\n  $_SESSION['user'] = 'Alice';\n  echo $_SESSION['user'];\n?>",
    "destroy_session": "<?php\n  session_start();\n  session_destroy();\n  echo 'Session destroyed.';\n?>"
  },
  "object_oriented_php": {
    "class_definition": {
      "code": "<?php\n  class Person {\n    public $name;\n    public function __construct($name) {\n      $this->name = $name;\n    }\n    public function greet() {\n      return 'Hello, ' . $this->name . '!';\n    }\n  }\n  $p = new Person('Alice');\n  echo $p->greet();\n?>"
    },
    "inheritance": {
      "code": "<?php\n  class Animal {\n    public $name;\n    public function __construct($name) {\n      $this->name = $name;\n    }\n  }\n  class Dog extends Animal {\n    public function speak() {\n      return $this->name . ' says Woof!';\n    }\n  }\n  $dog = new Dog('Buddy');\n  echo $dog->speak(); // Output: Buddy says Woof!\n?>"
    }
  },
  "next_steps": {
    "description": "Learn about MySQL integration with PHP for databases and explore frameworks like Laravel. Practice building dynamic web applications using PHP and explore MVC architecture for better code organization."
  }
}
